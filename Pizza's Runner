-- DDL Section
create schema pizza_runner;

create table runner_orders(
order_id integer,
runner_id integer,
pickup_time varchar(19),
distance varchar(7),
duration varchar(10),
cancellation varchar(23)
);
insert into runner_orders
(order_id,runner_id,pickup_time,distance,duration,cancellation)
VALUES
('1','1','2021-01-01 18:15:34','20km','32 minutes',''),
('2','1','2021-01-01 19:10:54','20km','27 minutes',''),
('3','1','2021-01-03 00:12:37','13.4km','20 mins',null),
('4','2','2021-01-04 13:53:03','23.4','40',null),
('5','3','2021-01-08 21:10:57','10','15',null),
('6','3','null','null','null','Restaurant Cancellation'),
('7','2','2021-01-8 21:30:45','25km','25 mins','null'),
('8','2','2021-01-10 00:15:02','23.4km','15 minute','null'),
('9','2','null','null','null','Customer Cancellation'),
('10','1','2021-01-11 18:50:20','10km','10 minutes','null');


create table runner(
runner_id integer,
registraton_date date
);
insert into runner
(runner_id ,registraton_date)
VALUES
('1', '2021-01-01'),
('2', '2021-01-03'),
('3', '2021-01-08'),
('4', '2021-01-15');

create table customer_orders(
order_id integer,
customer_id integer,
pizza_id integer,
exclusions varchar (4),
extras varchar(4),
order_time timestamp
);
insert into customer_orders
(order_id,customer_id,pizza_id,exclusions,extras,order_time)
VALUES
('1', '101','1','','','2021-01-01 18:05:02'),
('2', '101','1','','','2021-01-01 19:00:02'),
('3', '102','1','','','2021-01-01 23:51:23'),
('3', '102','2','',null,'2021-01-01 23:51:23'),
('4', '103','1','4','','2021-01-01 13:23:46'),
('4', '103','1','4','','2021-01-01 13:23:46'),
('4', '103','2','4','','2021-01-01 13:23:46'),
('5', '104','1','null','1','2021-01-01 21:00:29'),
('6', '101','2','null','null','2021-01-01 21:03:13'),
('7', '105','2','null','1','2021-01-01 21:20:29'),
('8', '102','1','null','null','2021-01-01 23:54:33'),
('9', '103','1','4','1,5','2021-01-01 11:2:59'),
('10','104','1','null','null','2021-01-01 18:34:49'),
('10','104','1','2,6','1,4','2021-01-01 18:34:49');

create table pizza_names(
pizza_id integer,
pizza_name text
);
insert into pizza_names
(pizza_id,pizza_name)
values
('1','Meat Lovers'),
('2','Vegetarian');

create table pizza_recipes(
pizza_id integer,
toppings text
);
insert into pizza_recipes
(pizza_id,toppings)
values
('1','1,2,3,4,5,6,8,10'),
('2','4,6,7,9,11,12');

create table pizza_toppings(
topping_id integer,
topping_name text
);
insert into pizza_toppings
(topping_id,topping_name)
values
('1','Bacon'),
('2','BBQ Sauce'),
('3','Beef'),
('4','Cheese'),
('5','Chicken'),
('6','Mushrooms'),
('7','Onions'),
('8','Pepperoni'),
('9','Peppers'),
('10','Salami');

-- Cleaning Data and Transformation
	-- 1. Customer Orders
		-- Upon inspection of table it can be seen that in the extras and exclusions columns 
		-- not all columns have values. Also the columns where customers don't request for exclusions 
		-- and extras are represented inconsistently. (they have either null as a datatype or a string or are left blank)
        -- These inconsistencies would most likely lead to errors when the table is queried in the future.
        -- A solution to this would to have a single method of representing cells that have no exclusions or extras.
        -- Due to the fact that the column has the VARCHAR datatype which contains strings a reasonable solution is to represent cells that don't have exclusions or extras as an empty string.
	
-- Query to implement above.
	drop table if exists customers_orders_temp;
    create table customer_orders_temp as 
		select
        order_id,
        customer_id,
        pizza_id,
        case
			when exclusions is null or exclusions = 'null' then ''
			else exclusions
		end as exclusions,
        case 
			when extras is null or extras = 'null' then ''
            else extras
		end as extras,
        order_time
	from customer_orders;
    
    -- Note: The 'customers_orders_temp' was created as a copy of the original table 'customers_orders' for the purpose
    -- of data cleaning and transformation leaving the original as a source in the event that it needs to be fallen back to.

		-- 2. Runners Table CLeaning and Transformation.
			-- Issues noted
				-- (i.)  'pickup_time','distance' & 'duration' columns were created as VARCHAR instead of TIMESTAMP, NUMERIC & INTEGER.
                -- (ii.) 'null' written as string instead of as a datatype.
                -- (iii.)'km','minute','minutes','mins' need to be removed from the 'distance' and 'duration' columns.
				-- (iv.) 'cancellation' column has similar issues with 'exclusions' and 'extras' columns in 'customer_orders' table.
	
    -- Query to resolve above.
		-- Creation of temporary table
    drop table if exists runner_orders_temp;
     create temporary table runner_orders_temp as
	 select 
        order_id,
        runner_id,
        case 
			when pickup_time = 'null' then null
            else pickup_time 
		end as pickup_time,
        case 
			when distance = 'null' then null
            when distance like '%km' then trim('km' from distance)
            else distance
		end as distance,
        case 
			when duration = 'null' then null
            when duration like '%mins' then trim('mins' from duration)
			when duration like '%minute' then trim('minute' from duration)
            when duration like '%minutes' then trim('minutes' from duration)
			else duration
		end as duration,
        case 
			when cancellation is null or cancellation = 'null' then ''
            else cancellation
		end as cancellation
        from runner_orders;
        
			-- Query to alter table datatype
    	alter table runner_orders_temp
        modify COLUMN pickup_time  timestamp,
		modify COLUMN distance numeric,
		modify COLUMN duration integer;
        
	
        select * from runner_orders_temp;

-- DML Section
-- Section A (Pizza Metrics)
	-- Queston 1 -- How many pizaas were ordered?
    select count(order_id) as "Number of Pizza's Ordered"
    from customer_orders_temp;
    
    
    -- Question 2 -- How many unique customers orders were made?
    select count(distinct(order_id)) as "Unique Orders Made"
    from pizza_runner.customer_orders_temp;
    
    -- Queston 3 -- How many successful orders were delivered by each runner?
    select runner_id as 'Runner ID', count(order_id) as 'Order Count'
	from pizza_runner.runner_orders_temp
    where distance is not null
    group by runner_id
    order by 'Order Count' desc;

	-- Question 4 -- How many each type of pizza were delivered?
	select 
    p.pizza_name as "Pizza Name",
    count(r.order_id) as "Pizzas Delivered"
    from runner_orders as r
    inner join customer_orders_temp as c on r.order_id = c.order_id
    inner join pizza_names as p on c.pizza_id = p.pizza_id
    where pickup_time <> 'null'
    group by p.pizza_name;

    -- Question 5 -- How many vegetarian and meatlovers were ordered by each customer?
    select c.customer_id as "Customer ID",
	p.pizza_name as "Pizza Name",
    count(c.customer_id) as "Pizza Count"
	from customer_orders_temp as c
	join pizza_names as p on p.pizza_id = c.pizza_id
    group by c.customer_id, p.pizza_name
	order by c.customer_id;
    
        -- Question 6 -- What was the maximum number of pizzas delivered in a a single order?
    select 
    c.order_id as "Customer ID",
	count(c.pizza_id) as "Pizza Ordered"
	from customer_orders_temp as c
	join runner_orders as r on r.order_id = c.order_id
    where pickup_time <> 'null'
    group by c.order_id
    order by count(c.pizza_id) DESC
    LIMIT 1;
    
    -- Question 7 -- For each customer, how many delivered pizzas had at least 1 change and how many had no changes?
    select * from customer_orders_temp;
    select order_id,
    exclusions,
    extras,
    length(exclusions) >0
    from customer_orders_temp;
